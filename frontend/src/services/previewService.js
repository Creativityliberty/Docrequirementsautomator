/**
 * Service de pr√©visualisation en temps r√©el
 */

// Cache pour stocker les pr√©visualisations r√©centes
const previewCache = new Map();

/**
 * G√©n√®re une cl√© de cache bas√©e sur les param√®tres de pr√©visualisation
 * 
 * @param {Object} params - Param√®tres de pr√©visualisation
 * @returns {string} - Cl√© de cache
 */
const generateCacheKey = (params) => {
  return JSON.stringify({
    projectName: params.projectName,
    description: params.description?.substring(0, 100),
    features: params.features?.map(f => f.substring(0, 50)),
    template: params.template
  });
};

/**
 * Fonction de debounce pour limiter les appels fr√©quents
 * 
 * @param {Function} func - Fonction √† debouncer
 * @param {number} wait - D√©lai d'attente en ms
 * @returns {Function} - Fonction debounc√©e
 */
const debounce = (func, wait) => {
  let timeout;
  
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
};

/**
 * Service de pr√©visualisation en temps r√©el
 */
export const previewService = {
  /**
   * G√©n√®re une pr√©visualisation du document
   * 
   * @param {Object} params - Param√®tres de pr√©visualisation
   * @param {string} params.projectName - Nom du projet
   * @param {string} params.description - Description du projet
   * @param {Array<string>} params.features - Fonctionnalit√©s du projet
   * @param {string} params.template - Template √† utiliser
   * @returns {Promise<string>} - Contenu pr√©visualis√©
   */
  generatePreview: async (params) => {
    const cacheKey = generateCacheKey(params);
    
    // V√©rifier si la pr√©visualisation est dans le cache
    if (previewCache.has(cacheKey)) {
      return previewCache.get(cacheKey);
    }
    
    try {
      // Dans une impl√©mentation r√©elle, nous appellerions l'API
      // Pour l'instant, nous simulons la g√©n√©ration
      
      // Simuler un d√©lai court
      await new Promise(resolve => setTimeout(resolve, 300));
      
      // G√©n√©rer un contenu de pr√©visualisation simple
      const { projectName, description, features, template } = params;
      
      const featuresList = features && features.length > 0
        ? features.map(f => `- ${f}`).join('\n')
        : '- Fonctionnalit√© 1\n- Fonctionnalit√© 2';
      
      const content = `# ${projectName || 'Projet'} Design

## üìã Objectifs et Vision

### Objectifs Principaux
${description || `Description du projet ${projectName || 'Exemple'}`}

### Fonctionnalit√©s
${featuresList}

## üèóÔ∏è Architecture

Cette section sera g√©n√©r√©e en fonction du template ${template || 's√©lectionn√©'}.

### Structures de Donn√©es Principales

#### Structure 1
\`\`\`typescript
interface ExampleStructure {
  id: string;
  name: string;
  description: string;
  createdAt: Date;
}
\`\`\`

### Diagramme de flux

\`\`\`mermaid
flowchart TD
    start[Start] --> process[Process]
    process --> decision{Decision}
    decision -->|Yes| end[End]
    decision -->|No| process
\`\`\`

## üìä M√©triques et Monitoring

- M√©trique 1: Description de la m√©trique
- M√©trique 2: Description de la m√©trique
- M√©trique 3: Description de la m√©trique

## üöÄ Plan d'Impl√©mentation

### Phase 1: Foundation
1. T√¢che 1
2. T√¢che 2
3. T√¢che 3

### Phase 2: D√©veloppement
1. T√¢che 1
2. T√¢che 2
3. T√¢che 3
`;
      
      // Stocker dans le cache
      previewCache.set(cacheKey, content);
      
      return content;
    } catch (error) {
      console.error('Error generating preview:', error);
      throw new Error(`Failed to generate preview: ${error.message}`);
    }
  },
  
  /**
   * Version debounc√©e de generatePreview pour limiter les appels
   * 
   * @param {Object} params - Param√®tres de pr√©visualisation
   * @param {Function} callback - Fonction de callback (error, content)
   */
  generatePreviewDebounced: function(params, callback) {
    const debouncedFn = debounce(async () => {
      try {
        const content = await this.generatePreview(params);
        callback(null, content);
      } catch (error) {
        callback(error, null);
      }
    }, 500);
    
    debouncedFn();
  }
};